{"ast":null,"code":"'use strict';\n\nconst descriptor = {\n  value: 'SqliteError',\n  writable: true,\n  enumerable: false,\n  configurable: true\n};\n\nfunction SqliteError(message, code) {\n  if (new.target !== SqliteError) {\n    return new SqliteError(message, code);\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('Expected second argument to be a string');\n  }\n\n  Error.call(this, message);\n  descriptor.value = '' + message;\n  Object.defineProperty(this, 'message', descriptor);\n  Error.captureStackTrace(this, SqliteError);\n  descriptor.value = code;\n  Object.defineProperty(this, 'code', descriptor);\n}\n\nObject.setPrototypeOf(SqliteError, Error);\nObject.setPrototypeOf(SqliteError.prototype, Error.prototype);\nObject.defineProperty(SqliteError.prototype, 'name', descriptor);\nmodule.exports = SqliteError;","map":{"version":3,"sources":["/Users/isanghun/Desktop/albion-web/node_modules/better-sqlite3/lib/sqlite-error.js"],"names":["descriptor","value","writable","enumerable","configurable","SqliteError","message","code","new","target","TypeError","Error","call","Object","defineProperty","captureStackTrace","setPrototypeOf","prototype","module","exports"],"mappings":"AAAA;;AACA,MAAMA,UAAU,GAAG;AAAEC,EAAAA,KAAK,EAAE,aAAT;AAAwBC,EAAAA,QAAQ,EAAE,IAAlC;AAAwCC,EAAAA,UAAU,EAAE,KAApD;AAA2DC,EAAAA,YAAY,EAAE;AAAzE,CAAnB;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AACnC,MAAIC,GAAG,CAACC,MAAJ,KAAeJ,WAAnB,EAAgC;AAC/B,WAAO,IAAIA,WAAJ,CAAgBC,OAAhB,EAAyBC,IAAzB,CAAP;AACA;;AACD,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC7B,UAAM,IAAIG,SAAJ,CAAc,yCAAd,CAAN;AACA;;AACDC,EAAAA,KAAK,CAACC,IAAN,CAAW,IAAX,EAAiBN,OAAjB;AACAN,EAAAA,UAAU,CAACC,KAAX,GAAmB,KAAKK,OAAxB;AACAO,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuCd,UAAvC;AACAW,EAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8BV,WAA9B;AACAL,EAAAA,UAAU,CAACC,KAAX,GAAmBM,IAAnB;AACAM,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoCd,UAApC;AACA;;AACDa,MAAM,CAACG,cAAP,CAAsBX,WAAtB,EAAmCM,KAAnC;AACAE,MAAM,CAACG,cAAP,CAAsBX,WAAW,CAACY,SAAlC,EAA6CN,KAAK,CAACM,SAAnD;AACAJ,MAAM,CAACC,cAAP,CAAsBT,WAAW,CAACY,SAAlC,EAA6C,MAA7C,EAAqDjB,UAArD;AACAkB,MAAM,CAACC,OAAP,GAAiBd,WAAjB","sourcesContent":["'use strict';\nconst descriptor = { value: 'SqliteError', writable: true, enumerable: false, configurable: true };\n\nfunction SqliteError(message, code) {\n\tif (new.target !== SqliteError) {\n\t\treturn new SqliteError(message, code);\n\t}\n\tif (typeof code !== 'string') {\n\t\tthrow new TypeError('Expected second argument to be a string');\n\t}\n\tError.call(this, message);\n\tdescriptor.value = '' + message;\n\tObject.defineProperty(this, 'message', descriptor);\n\tError.captureStackTrace(this, SqliteError);\n\tdescriptor.value = code;\n\tObject.defineProperty(this, 'code', descriptor);\n}\nObject.setPrototypeOf(SqliteError, Error);\nObject.setPrototypeOf(SqliteError.prototype, Error.prototype);\nObject.defineProperty(SqliteError.prototype, 'name', descriptor);\nmodule.exports = SqliteError;\n"]},"metadata":{},"sourceType":"script"}