{"ast":null,"code":"'use strict';\n\nconst {\n  getBooleanOption\n} = require('./util');\n\nmodule.exports = createAggregate => {\n  return function defineAggregate(name, options) {\n    if (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n    if (typeof options !== 'object' || options === null) throw new TypeError('Expected second argument to be an options object');\n    if (!name) throw new TypeError('User-defined function name cannot be an empty string');\n    const start = 'start' in options ? options.start : null;\n    const step = getFunctionOption(options, 'step', true);\n    const inverse = getFunctionOption(options, 'inverse', false);\n    const result = getFunctionOption(options, 'result', false);\n    const safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n    const deterministic = getBooleanOption(options, 'deterministic');\n    const varargs = getBooleanOption(options, 'varargs');\n    let argCount = -1;\n\n    if (!varargs) {\n      argCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\n      if (argCount > 0) argCount -= 1;\n      if (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n    }\n\n    return createAggregate.call(this, start, step, inverse, result, name, argCount, safeIntegers, deterministic);\n  };\n};\n\nconst getFunctionOption = (options, key, required) => {\n  const value = key in options ? options[key] : null;\n  if (typeof value === 'function') return value;\n  if (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\n  if (required) throw new TypeError(`Missing required option \"${key}\"`);\n  return null;\n};\n\nconst getLength = ({\n  length\n}) => {\n  if (Number.isInteger(length) && length >= 0) return length;\n  throw new TypeError('Expected function.length to be a positive integer');\n};","map":{"version":3,"sources":["/Users/isanghun/Desktop/albion-web/node_modules/better-sqlite3/lib/aggregate.js"],"names":["getBooleanOption","require","module","exports","createAggregate","defineAggregate","name","options","TypeError","start","step","getFunctionOption","inverse","result","safeIntegers","deterministic","varargs","argCount","Math","max","getLength","RangeError","call","key","required","value","length","Number","isInteger"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,QAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,eAAD,IAAqB;AACrC,SAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AAC9C,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B,MAAM,IAAIE,SAAJ,CAAc,wCAAd,CAAN;AAC9B,QAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD,MAAM,IAAIC,SAAJ,CAAc,kDAAd,CAAN;AACrD,QAAI,CAACF,IAAL,EAAW,MAAM,IAAIE,SAAJ,CAAc,sDAAd,CAAN;AAEX,UAAMC,KAAK,GAAG,WAAWF,OAAX,GAAqBA,OAAO,CAACE,KAA7B,GAAqC,IAAnD;AACA,UAAMC,IAAI,GAAGC,iBAAiB,CAACJ,OAAD,EAAU,MAAV,EAAkB,IAAlB,CAA9B;AACA,UAAMK,OAAO,GAAGD,iBAAiB,CAACJ,OAAD,EAAU,SAAV,EAAqB,KAArB,CAAjC;AACA,UAAMM,MAAM,GAAGF,iBAAiB,CAACJ,OAAD,EAAU,QAAV,EAAoB,KAApB,CAAhC;AACA,UAAMO,YAAY,GAAG,kBAAkBP,OAAlB,GAA4B,CAACP,gBAAgB,CAACO,OAAD,EAAU,cAAV,CAA7C,GAAyE,CAA9F;AACA,UAAMQ,aAAa,GAAGf,gBAAgB,CAACO,OAAD,EAAU,eAAV,CAAtC;AACA,UAAMS,OAAO,GAAGhB,gBAAgB,CAACO,OAAD,EAAU,SAAV,CAAhC;AACA,QAAIU,QAAQ,GAAG,CAAC,CAAhB;;AAEA,QAAI,CAACD,OAAL,EAAc;AACbC,MAAAA,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASC,SAAS,CAACV,IAAD,CAAlB,EAA0BE,OAAO,GAAGQ,SAAS,CAACR,OAAD,CAAZ,GAAwB,CAAzD,CAAX;AACA,UAAIK,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,IAAI,CAAZ;AAClB,UAAIA,QAAQ,GAAG,GAAf,EAAoB,MAAM,IAAII,UAAJ,CAAe,4DAAf,CAAN;AACpB;;AAED,WAAOjB,eAAe,CAACkB,IAAhB,CAAqB,IAArB,EAA2Bb,KAA3B,EAAkCC,IAAlC,EAAwCE,OAAxC,EAAiDC,MAAjD,EAAyDP,IAAzD,EAA+DW,QAA/D,EAAyEH,YAAzE,EAAuFC,aAAvF,CAAP;AACA,GArBD;AAsBA,CAvBD;;AAyBA,MAAMJ,iBAAiB,GAAG,CAACJ,OAAD,EAAUgB,GAAV,EAAeC,QAAf,KAA4B;AACrD,QAAMC,KAAK,GAAGF,GAAG,IAAIhB,OAAP,GAAiBA,OAAO,CAACgB,GAAD,CAAxB,GAAgC,IAA9C;AACA,MAAI,OAAOE,KAAP,KAAiB,UAArB,EAAiC,OAAOA,KAAP;AACjC,MAAIA,KAAK,IAAI,IAAb,EAAmB,MAAM,IAAIjB,SAAJ,CAAe,iBAAgBe,GAAI,2BAAnC,CAAN;AACnB,MAAIC,QAAJ,EAAc,MAAM,IAAIhB,SAAJ,CAAe,4BAA2Be,GAAI,GAA9C,CAAN;AACd,SAAO,IAAP;AACA,CAND;;AAQA,MAAMH,SAAS,GAAG,CAAC;AAAEM,EAAAA;AAAF,CAAD,KAAgB;AACjC,MAAIC,MAAM,CAACC,SAAP,CAAiBF,MAAjB,KAA4BA,MAAM,IAAI,CAA1C,EAA6C,OAAOA,MAAP;AAC7C,QAAM,IAAIlB,SAAJ,CAAc,mDAAd,CAAN;AACA,CAHD","sourcesContent":["'use strict';\nconst { getBooleanOption } = require('./util');\n\nmodule.exports = (createAggregate) => {\n\treturn function defineAggregate(name, options) {\n\t\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\t\tif (typeof options !== 'object' || options === null) throw new TypeError('Expected second argument to be an options object');\n\t\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\n\n\t\tconst start = 'start' in options ? options.start : null;\n\t\tconst step = getFunctionOption(options, 'step', true);\n\t\tconst inverse = getFunctionOption(options, 'inverse', false);\n\t\tconst result = getFunctionOption(options, 'result', false);\n\t\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n\t\tconst deterministic = getBooleanOption(options, 'deterministic');\n\t\tconst varargs = getBooleanOption(options, 'varargs');\n\t\tlet argCount = -1;\n\n\t\tif (!varargs) {\n\t\t\targCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\n\t\t\tif (argCount > 0) argCount -= 1;\n\t\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n\t\t}\n\n\t\treturn createAggregate.call(this, start, step, inverse, result, name, argCount, safeIntegers, deterministic);\n\t};\n};\n\nconst getFunctionOption = (options, key, required) => {\n\tconst value = key in options ? options[key] : null;\n\tif (typeof value === 'function') return value;\n\tif (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\n\tif (required) throw new TypeError(`Missing required option \"${key}\"`);\n\treturn null;\n};\n\nconst getLength = ({ length }) => {\n\tif (Number.isInteger(length) && length >= 0) return length;\n\tthrow new TypeError('Expected function.length to be a positive integer');\n};\n"]},"metadata":{},"sourceType":"script"}