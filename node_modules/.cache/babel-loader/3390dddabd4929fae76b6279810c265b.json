{"ast":null,"code":"'use strict';\n\nconst {\n  getBooleanOption\n} = require('./util');\n\nmodule.exports = setPragmaMode => {\n  return function pragma(source, options) {\n    if (options == null) options = {};\n    if (typeof source !== 'string') throw new TypeError('Expected first argument to be a string');\n    if (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n    const simple = getBooleanOption(options, 'simple');\n    setPragmaMode.call(this, true);\n\n    try {\n      return simple ? this.prepare(`PRAGMA ${source}`).pluck().get() : this.prepare(`PRAGMA ${source}`).all();\n    } finally {\n      setPragmaMode.call(this, false);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/isanghun/Desktop/albion-web/node_modules/better-sqlite3/lib/pragma.js"],"names":["getBooleanOption","require","module","exports","setPragmaMode","pragma","source","options","TypeError","simple","call","prepare","pluck","get","all"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,QAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,aAAD,IAAmB;AACnC,SAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,OAAxB,EAAiC;AACvC,QAAIA,OAAO,IAAI,IAAf,EAAqBA,OAAO,GAAG,EAAV;AACrB,QAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIE,SAAJ,CAAc,wCAAd,CAAN;AAChC,QAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC,MAAM,IAAIC,SAAJ,CAAc,kDAAd,CAAN;AACjC,UAAMC,MAAM,GAAGT,gBAAgB,CAACO,OAAD,EAAU,QAAV,CAA/B;AAEAH,IAAAA,aAAa,CAACM,IAAd,CAAmB,IAAnB,EAAyB,IAAzB;;AACA,QAAI;AACH,aAAOD,MAAM,GACV,KAAKE,OAAL,CAAc,UAASL,MAAO,EAA9B,EAAiCM,KAAjC,GAAyCC,GAAzC,EADU,GAEV,KAAKF,OAAL,CAAc,UAASL,MAAO,EAA9B,EAAiCQ,GAAjC,EAFH;AAGA,KAJD,SAIU;AACTV,MAAAA,aAAa,CAACM,IAAd,CAAmB,IAAnB,EAAyB,KAAzB;AACA;AACD,GAdD;AAeA,CAhBD","sourcesContent":["'use strict';\nconst { getBooleanOption } = require('./util');\n\nmodule.exports = (setPragmaMode) => {\n\treturn function pragma(source, options) {\n\t\tif (options == null) options = {};\n\t\tif (typeof source !== 'string') throw new TypeError('Expected first argument to be a string');\n\t\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\t\tconst simple = getBooleanOption(options, 'simple');\n\n\t\tsetPragmaMode.call(this, true);\n\t\ttry {\n\t\t\treturn simple\n\t\t\t\t? this.prepare(`PRAGMA ${source}`).pluck().get()\n\t\t\t\t: this.prepare(`PRAGMA ${source}`).all();\n\t\t} finally {\n\t\t\tsetPragmaMode.call(this, false);\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}