{"ast":null,"code":"'use strict';\n\nconst {\n  getBooleanOption\n} = require('./util');\n\nmodule.exports = createFunction => {\n  return function defineFunction(name, options, fn) {\n    if (options == null) options = {};\n\n    if (typeof options === 'function') {\n      fn = options;\n      options = {};\n    }\n\n    if (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n    if (typeof fn !== 'function') throw new TypeError('Expected last argument to be a function');\n    if (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n    if (!name) throw new TypeError('User-defined function name cannot be an empty string');\n    const safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n    const deterministic = getBooleanOption(options, 'deterministic');\n    const varargs = getBooleanOption(options, 'varargs');\n    let argCount = -1;\n\n    if (!varargs) {\n      argCount = fn.length;\n      if (!Number.isInteger(argCount) || argCount < 0) throw new TypeError('Expected function.length to be a positive integer');\n      if (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n    }\n\n    return createFunction.call(this, fn, name, argCount, safeIntegers, deterministic);\n  };\n};","map":{"version":3,"sources":["/Users/isanghun/Desktop/albion-web/node_modules/better-sqlite3/lib/function.js"],"names":["getBooleanOption","require","module","exports","createFunction","defineFunction","name","options","fn","TypeError","safeIntegers","deterministic","varargs","argCount","length","Number","isInteger","RangeError","call"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,QAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,cAAD,IAAoB;AACpC,SAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuCC,EAAvC,EAA2C;AACjD,QAAID,OAAO,IAAI,IAAf,EAAqBA,OAAO,GAAG,EAAV;;AACrB,QAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AAAEC,MAAAA,EAAE,GAAGD,OAAL;AAAcA,MAAAA,OAAO,GAAG,EAAV;AAAe;;AAClE,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B,MAAM,IAAIG,SAAJ,CAAc,wCAAd,CAAN;AAC9B,QAAI,OAAOD,EAAP,KAAc,UAAlB,EAA8B,MAAM,IAAIC,SAAJ,CAAc,yCAAd,CAAN;AAC9B,QAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC,MAAM,IAAIE,SAAJ,CAAc,kDAAd,CAAN;AACjC,QAAI,CAACH,IAAL,EAAW,MAAM,IAAIG,SAAJ,CAAc,sDAAd,CAAN;AAEX,UAAMC,YAAY,GAAG,kBAAkBH,OAAlB,GAA4B,CAACP,gBAAgB,CAACO,OAAD,EAAU,cAAV,CAA7C,GAAyE,CAA9F;AACA,UAAMI,aAAa,GAAGX,gBAAgB,CAACO,OAAD,EAAU,eAAV,CAAtC;AACA,UAAMK,OAAO,GAAGZ,gBAAgB,CAACO,OAAD,EAAU,SAAV,CAAhC;AACA,QAAIM,QAAQ,GAAG,CAAC,CAAhB;;AAEA,QAAI,CAACD,OAAL,EAAc;AACbC,MAAAA,QAAQ,GAAGL,EAAE,CAACM,MAAd;AACA,UAAI,CAACC,MAAM,CAACC,SAAP,CAAiBH,QAAjB,CAAD,IAA+BA,QAAQ,GAAG,CAA9C,EAAiD,MAAM,IAAIJ,SAAJ,CAAc,mDAAd,CAAN;AACjD,UAAII,QAAQ,GAAG,GAAf,EAAoB,MAAM,IAAII,UAAJ,CAAe,4DAAf,CAAN;AACpB;;AAED,WAAOb,cAAc,CAACc,IAAf,CAAoB,IAApB,EAA0BV,EAA1B,EAA8BF,IAA9B,EAAoCO,QAApC,EAA8CH,YAA9C,EAA4DC,aAA5D,CAAP;AACA,GApBD;AAqBA,CAtBD","sourcesContent":["'use strict';\nconst { getBooleanOption } = require('./util');\n\nmodule.exports = (createFunction) => {\n\treturn function defineFunction(name, options, fn) {\n\t\tif (options == null) options = {};\n\t\tif (typeof options === 'function') { fn = options; options = {}; }\n\t\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\t\tif (typeof fn !== 'function') throw new TypeError('Expected last argument to be a function');\n\t\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\t\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\n\n\t\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n\t\tconst deterministic = getBooleanOption(options, 'deterministic');\n\t\tconst varargs = getBooleanOption(options, 'varargs');\n\t\tlet argCount = -1;\n\n\t\tif (!varargs) {\n\t\t\targCount = fn.length;\n\t\t\tif (!Number.isInteger(argCount) || argCount < 0) throw new TypeError('Expected function.length to be a positive integer');\n\t\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n\t\t}\n\n\t\treturn createFunction.call(this, fn, name, argCount, safeIntegers, deterministic);\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}