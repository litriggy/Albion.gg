{"ast":null,"code":"'use strict';\n\nconst controllers = new WeakMap();\n\nmodule.exports = function transaction(fn) {\n  if (typeof fn !== 'function') throw new TypeError('Expected first argument to be a function');\n  const controller = getController(this);\n  const {\n    apply\n  } = Function.prototype;\n  const properties = {\n    default: {\n      value: wrapTransaction(apply, fn, this, controller.default)\n    },\n    deferred: {\n      value: wrapTransaction(apply, fn, this, controller.deferred)\n    },\n    immediate: {\n      value: wrapTransaction(apply, fn, this, controller.immediate)\n    },\n    exclusive: {\n      value: wrapTransaction(apply, fn, this, controller.exclusive)\n    },\n    database: {\n      value: this,\n      enumerable: true\n    }\n  };\n  Object.defineProperties(properties.default.value, properties);\n  Object.defineProperties(properties.deferred.value, properties);\n  Object.defineProperties(properties.immediate.value, properties);\n  Object.defineProperties(properties.exclusive.value, properties);\n  return properties.default.value;\n};\n\nconst getController = db => {\n  let controller = controllers.get(db);\n\n  if (!controller) {\n    const shared = {\n      commit: db.prepare('COMMIT'),\n      rollback: db.prepare('ROLLBACK'),\n      savepoint: db.prepare('SAVEPOINT `\\t_bs3.\\t`'),\n      release: db.prepare('RELEASE `\\t_bs3.\\t`'),\n      rollbackTo: db.prepare('ROLLBACK TO `\\t_bs3.\\t`')\n    };\n    controllers.set(db, controller = {\n      default: Object.assign({\n        begin: db.prepare('BEGIN')\n      }, shared),\n      deferred: Object.assign({\n        begin: db.prepare('BEGIN DEFERRED')\n      }, shared),\n      immediate: Object.assign({\n        begin: db.prepare('BEGIN IMMEDIATE')\n      }, shared),\n      exclusive: Object.assign({\n        begin: db.prepare('BEGIN EXCLUSIVE')\n      }, shared)\n    });\n  }\n\n  return controller;\n};\n\nconst wrapTransaction = (apply, fn, db, {\n  begin,\n  commit,\n  rollback,\n  savepoint,\n  release,\n  rollbackTo\n}) => function sqliteTransaction() {\n  let before, after, undo;\n\n  if (db.inTransaction) {\n    before = savepoint;\n    after = release;\n    undo = rollbackTo;\n  } else {\n    before = begin;\n    after = commit;\n    undo = rollback;\n  }\n\n  before.run();\n\n  try {\n    const result = apply.call(fn, this, arguments);\n    after.run();\n    return result;\n  } catch (ex) {\n    if (db.inTransaction) {\n      undo.run();\n      if (undo !== rollback) after.run();\n    }\n\n    throw ex;\n  }\n};","map":{"version":3,"sources":["/Users/isanghun/Desktop/albion-web/node_modules/better-sqlite3/lib/transaction.js"],"names":["controllers","WeakMap","module","exports","transaction","fn","TypeError","controller","getController","apply","Function","prototype","properties","default","value","wrapTransaction","deferred","immediate","exclusive","database","enumerable","Object","defineProperties","db","get","shared","commit","prepare","rollback","savepoint","release","rollbackTo","set","assign","begin","sqliteTransaction","before","after","undo","inTransaction","run","result","call","arguments","ex"],"mappings":"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","sourcesContent":["'use strict';\nconst controllers = new WeakMap;\n\nmodule.exports = function transaction(fn) {\n\tif (typeof fn !== 'function') throw new TypeError('Expected first argument to be a function');\n\tconst controller = getController(this);\n\tconst { apply } = Function.prototype;\n\n\tconst properties = {\n\t\tdefault: { value: wrapTransaction(apply, fn, this, controller.default) },\n\t\tdeferred: { value: wrapTransaction(apply, fn, this, controller.deferred) },\n\t\timmediate: { value: wrapTransaction(apply, fn, this, controller.immediate) },\n\t\texclusive: { value: wrapTransaction(apply, fn, this, controller.exclusive) },\n\t\tdatabase: { value: this, enumerable: true },\n\t};\n\n\tObject.defineProperties(properties.default.value, properties);\n\tObject.defineProperties(properties.deferred.value, properties);\n\tObject.defineProperties(properties.immediate.value, properties);\n\tObject.defineProperties(properties.exclusive.value, properties);\n\n\treturn properties.default.value;\n};\n\nconst getController = (db) => {\n\tlet controller = controllers.get(db);\n\tif (!controller) {\n\t\tconst shared = {\n\t\t\tcommit: db.prepare('COMMIT'),\n\t\t\trollback: db.prepare('ROLLBACK'),\n\t\t\tsavepoint: db.prepare('SAVEPOINT `\\t_bs3.\\t`'),\n\t\t\trelease: db.prepare('RELEASE `\\t_bs3.\\t`'),\n\t\t\trollbackTo: db.prepare('ROLLBACK TO `\\t_bs3.\\t`'),\n\t\t};\n\t\tcontrollers.set(db, controller = {\n\t\t\tdefault: Object.assign({ begin: db.prepare('BEGIN') }, shared),\n\t\t\tdeferred: Object.assign({ begin: db.prepare('BEGIN DEFERRED') }, shared),\n\t\t\timmediate: Object.assign({ begin: db.prepare('BEGIN IMMEDIATE') }, shared),\n\t\t\texclusive: Object.assign({ begin: db.prepare('BEGIN EXCLUSIVE') }, shared),\n\t\t});\n\t}\n\treturn controller;\n};\n\nconst wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo }) => function sqliteTransaction() {\n\tlet before, after, undo;\n\tif (db.inTransaction) {\n\t\tbefore = savepoint;\n\t\tafter = release;\n\t\tundo = rollbackTo;\n\t} else {\n\t\tbefore = begin;\n\t\tafter = commit;\n\t\tundo = rollback;\n\t}\n\tbefore.run();\n\ttry {\n\t\tconst result = apply.call(fn, this, arguments);\n\t\tafter.run();\n\t\treturn result;\n\t} catch (ex) {\n\t\tif (db.inTransaction) {\n\t\t\tundo.run();\n\t\t\tif (undo !== rollback) after.run();\n\t\t}\n\t\tthrow ex;\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}