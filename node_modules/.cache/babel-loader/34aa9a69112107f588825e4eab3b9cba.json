{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst util = require('./util');\n\nconst CPPDatabase = require('bindings')('better_sqlite3.node').Database;\n\nfunction Database(filenameGiven, options) {\n  if (filenameGiven == null) filenameGiven = '';\n  if (options == null) options = {};\n  if (typeof filenameGiven !== 'string') throw new TypeError('Expected first argument to be a string');\n  if (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n  let filename = filenameGiven.trim();\n  if (filename.toLowerCase().startsWith('file:')) throw new TypeError('URI filenames are reserved for internal use only');\n  if ('readOnly' in options) throw new TypeError('Misspelled option \"readOnly\" should be \"readonly\"');\n  const anonymous = filename === '' || filename === ':memory:';\n  const memory = util.getBooleanOption(options, 'memory');\n  const readonly = util.getBooleanOption(options, 'readonly');\n  const fileMustExist = util.getBooleanOption(options, 'fileMustExist');\n  const timeout = 'timeout' in options ? options.timeout : 5000;\n  const verbose = 'verbose' in options ? options.verbose : null;\n  if (readonly && (memory || anonymous)) throw new TypeError('In-memory databases cannot be readonly');\n  if (anonymous && !memory && 'memory' in options) throw new TypeError('Option \"memory\" conflicts with non-existent filename');\n  if (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the \"timeout\" option to be a positive integer');\n  if (timeout > 0x7fffffff) throw new RangeError('Option \"timeout\" cannot be greater than 2147483647');\n  if (verbose != null && typeof verbose !== 'function') throw new TypeError('Expected the \"verbose\" option to be a function');\n\n  if (!memory && !anonymous && !fs.existsSync(path.dirname(filename))) {\n    throw new TypeError('Cannot open database because the directory does not exist');\n  }\n\n  if (memory && !anonymous) {\n    if (process.platform === 'win32') {\n      filename = filename.replace(/\\\\/g, '/').replace(/^[a-z]:\\//i, '/$&');\n    }\n\n    filename = 'file:' + filename.replace(/#/g, '%23').replace(/\\?/g, '%3f').replace(/\\/\\/+/g, '/') + '?mode=memory&cache=shared';\n  }\n\n  return new CPPDatabase(filename, filenameGiven, memory || anonymous, readonly, fileMustExist, timeout, verbose || null);\n}\n\nutil.wrap(CPPDatabase, 'pragma', require('./pragma'));\nutil.wrap(CPPDatabase, 'function', require('./function'));\nutil.wrap(CPPDatabase, 'aggregate', require('./aggregate'));\nutil.wrap(CPPDatabase, 'backup', require('./backup'));\nCPPDatabase.prototype.transaction = require('./transaction');\nCPPDatabase.prototype.constructor = Database;\nDatabase.prototype = CPPDatabase.prototype;\nmodule.exports = Database;","map":{"version":3,"sources":["/Users/isanghun/Desktop/albion-web/node_modules/better-sqlite3/lib/database.js"],"names":["fs","require","path","util","CPPDatabase","Database","filenameGiven","options","TypeError","filename","trim","toLowerCase","startsWith","anonymous","memory","getBooleanOption","readonly","fileMustExist","timeout","verbose","Number","isInteger","RangeError","existsSync","dirname","process","platform","replace","wrap","prototype","transaction","constructor","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst util = require('./util');\n\nconst CPPDatabase = require('bindings')('better_sqlite3.node').Database;\n\nfunction Database(filenameGiven, options) {\n\tif (filenameGiven == null) filenameGiven = '';\n\tif (options == null) options = {};\n\tif (typeof filenameGiven !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\n\tlet filename = filenameGiven.trim();\n\tif (filename.toLowerCase().startsWith('file:')) throw new TypeError('URI filenames are reserved for internal use only');\n\tif ('readOnly' in options) throw new TypeError('Misspelled option \"readOnly\" should be \"readonly\"');\n\n\tconst anonymous = filename === '' || filename === ':memory:';\n\tconst memory = util.getBooleanOption(options, 'memory');\n\tconst readonly = util.getBooleanOption(options, 'readonly');\n\tconst fileMustExist = util.getBooleanOption(options, 'fileMustExist');\n\tconst timeout = 'timeout' in options ? options.timeout : 5000;\n\tconst verbose = 'verbose' in options ? options.verbose : null;\n\n\tif (readonly && (memory || anonymous)) throw new TypeError('In-memory databases cannot be readonly');\n\tif (anonymous && !memory && 'memory' in options) throw new TypeError('Option \"memory\" conflicts with non-existent filename');\n\tif (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the \"timeout\" option to be a positive integer');\n\tif (timeout > 0x7fffffff) throw new RangeError('Option \"timeout\" cannot be greater than 2147483647');\n\tif (verbose != null && typeof verbose !== 'function') throw new TypeError('Expected the \"verbose\" option to be a function');\n\n\tif (!memory && !anonymous && !fs.existsSync(path.dirname(filename))) {\n\t\tthrow new TypeError('Cannot open database because the directory does not exist');\n\t}\n\n\tif (memory && !anonymous) {\n\t\tif (process.platform === 'win32') {\n\t\t\tfilename = filename.replace(/\\\\/g, '/').replace(/^[a-z]:\\//i, '/$&');\n\t\t}\n\t\tfilename = 'file:'\n\t\t\t+ filename\n\t\t\t\t.replace(/#/g, '%23')\n\t\t\t\t.replace(/\\?/g, '%3f')\n\t\t\t\t.replace(/\\/\\/+/g, '/')\n\t\t\t+ '?mode=memory&cache=shared';\n\t}\n\treturn new CPPDatabase(filename, filenameGiven, memory || anonymous, readonly, fileMustExist, timeout, verbose || null);\n}\n\nutil.wrap(CPPDatabase, 'pragma', require('./pragma'));\nutil.wrap(CPPDatabase, 'function', require('./function'));\nutil.wrap(CPPDatabase, 'aggregate', require('./aggregate'));\nutil.wrap(CPPDatabase, 'backup', require('./backup'));\nCPPDatabase.prototype.transaction = require('./transaction');\nCPPDatabase.prototype.constructor = Database;\nDatabase.prototype = CPPDatabase.prototype;\nmodule.exports = Database;\n"]},"metadata":{},"sourceType":"script"}